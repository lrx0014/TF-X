// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.4
// - protoc             v5.29.3
// source: version/version.proto

package version

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationVersionversion = "/version.Version/version"

type VersionHTTPServer interface {
	Version(context.Context, *VersionReq) (*VersionReply, error)
}

func RegisterVersionHTTPServer(s *http.Server, srv VersionHTTPServer) {
	r := s.Route("/")
	r.GET("/oss-mng/version", _Version_Version0_HTTP_Handler(srv))
}

func _Version_Version0_HTTP_Handler(srv VersionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in VersionReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationVersionversion)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Version(ctx, req.(*VersionReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*VersionReply)
		return ctx.Result(200, reply)
	}
}

type VersionHTTPClient interface {
	Version(ctx context.Context, req *VersionReq, opts ...http.CallOption) (rsp *VersionReply, err error)
}

type VersionHTTPClientImpl struct {
	cc *http.Client
}

func NewVersionHTTPClient(client *http.Client) VersionHTTPClient {
	return &VersionHTTPClientImpl{client}
}

func (c *VersionHTTPClientImpl) Version(ctx context.Context, in *VersionReq, opts ...http.CallOption) (*VersionReply, error) {
	var out VersionReply
	pattern := "/oss-mng/version"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationVersionversion))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
